(defrule check-answer
  (declare (salience  -1000))
  (initial-fact)
  (test (not (not answer)))
=>
  (assert (answer (text "В этот день не получится")))
)


(defrule person-count-one
  (initial-fact)
  (eventRequest (group_name ?eventRequest_group_name))
  (test (eq ?eventRequest_group_name "я"))
  =>
  (assert (one-person))
)

(defrule person-count-two
  (initial-fact)
  (eventRequest (group_name ?eventRequest_group_name))
  (test (or(eq ?eventRequest_group_name "Антон")
              (eq ?eventRequest_group_name "Настя")
              (eq ?eventRequest_group_name "друзья")))
  =>
  (assert (two-person))
)

(defrule person-count-three
  (initial-fact)
  (eventRequest (group_name ?eventRequest_group_name))
  (test (eq ?eventRequest_group_name "коллеги"))
  =>
  (assert (three-person))
)

(deffunction timeString (?time)
  (if (< ?time 10)
    then (str-cat "0" ?time)
  else 
    ?time
  )
)

(defrule create-used-freeTime-1
  (initial-fact)
  (event (name ?event_name) (hour ?event_hour) (minute ?event_minute) (second ?event_second))
  (eventRequest (group_name ?eventRequest_group_name) (date ?eventRequest_date) (name ?eventRequest_name)
                  (minHour ?minHourRequest)  (minMinute ?minMinuteRequest)  (minSecond ?minSecondRequest) 
                  (maxHour ?maxHourRequest)  (maxMinute ?maxMinuteRequest)  (maxSecond ?maxSecondRequest))
  (personGroup (group_name ?personGroup_group_name) (person_name ?personGroup_person_name))
  (person (id ?id) (name ?person_name))
  (freeTime (id_person ?person_id) (minDate ?minDate) (maxDate ?maxDate) 
            (minHour ?minHour)  (minMinute ?minMinute)  (minSecond ?minSecond) 
            (maxHour ?maxHour)  (maxMinute ?maxMinute)  (maxSecond ?maxSecond) (id_weekday ?id_weekday))
  (test (and  (eq ?eventRequest_group_name ?personGroup_group_name)
              (eq ?personGroup_person_name ?person_name)
              (= ?person_id ?id)
              (eq ?minDate ?eventRequest_date)
              (eq ?event_name ?eventRequest_name)
              (<= (+ (* (+ (* ?event_hour 60) ?event_minute) 60) ?event_second) 
                  (- (+ (* (+ (* ?maxHour 60) ?maxMinute) 60) ?maxSecond) (+ (* (+ (* ?minHour 60) ?minMinute) 60) ?minSecond))
                  )
              (<= (+ (* (+ (* ?minHourRequest 60) ?minMinuteRequest) 60) ?minSecondRequest)
                  (+ (* (+ (* ?minHour 60) ?minMinute) 60) ?minSecond)
              )
              (>= (+ (* (+ (* ?maxHourRequest 60) ?maxMinuteRequest) 60) ?maxSecondRequest)
                  (+ (* (+ (* ?maxHour 60) ?maxMinute) 60) ?maxSecond)
              )
        )
  )
  =>
  (assert (useFreeTime  (id_person ?person_id) (minDate ?minDate) (maxDate ?maxDate) 
                        (minHour ?minHour)  (minMinute ?minMinute)  (minSecond ?minSecond) 
                        (maxHour ?maxHour)  (maxMinute ?maxMinute)  (maxSecond ?maxSecond) (id_weekday ?id_weekday)))
)

(defrule create-used-freeTime-2
  (initial-fact)
  (event (name ?event_name) (hour ?event_hour) (minute ?event_minute) (second ?event_second))
  (eventRequest (group_name ?eventRequest_group_name) (date ?eventRequest_date) (name ?eventRequest_name)
                  (minHour ?minHourRequest)  (minMinute ?minMinuteRequest)  (minSecond ?minSecondRequest) 
                  (maxHour ?maxHourRequest)  (maxMinute ?maxMinuteRequest)  (maxSecond ?maxSecondRequest))
  (personGroup (group_name ?personGroup_group_name) (person_name ?personGroup_person_name))
  (person (id ?id) (name ?person_name))
  (freeTime (id_person ?person_id) (minDate ?minDate) (maxDate ?maxDate) 
            (minHour ?minHour)  (minMinute ?minMinute)  (minSecond ?minSecond) 
            (maxHour ?maxHour)  (maxMinute ?maxMinute)  (maxSecond ?maxSecond) (id_weekday ?id_weekday))
  (test (and  (eq ?eventRequest_group_name ?personGroup_group_name)
              (eq ?personGroup_person_name ?person_name)
              (= ?person_id ?id)
              (eq ?minDate ?eventRequest_date)
              (eq ?event_name ?eventRequest_name)
              (<= (+ (* (+ (* ?event_hour 60) ?event_minute) 60) ?event_second) 
                  (- (+ (* (+ (* ?maxHourRequest 60) ?maxMinuteRequest) 60) ?maxSecondRequest) (+ (* (+ (* ?minHour 60) ?minMinute) 60) ?minSecond))
                  )
              (<= (+ (* (+ (* ?minHourRequest 60) ?minMinuteRequest) 60) ?minSecondRequest)
                  (+ (* (+ (* ?minHour 60) ?minMinute) 60) ?minSecond)
              )
              (>= (+ (* (+ (* ?maxHourRequest 60) ?maxMinuteRequest) 60) ?maxSecondRequest)
                  (+ (* (+ (* ?minHour 60) ?minMinute) 60) ?minSecond)
              )
              (< (+ (* (+ (* ?maxHourRequest 60) ?maxMinuteRequest) 60) ?maxSecondRequest)
                  (+ (* (+ (* ?maxHour 60) ?maxMinute) 60) ?maxSecond)
              )
        )
  )
  =>
  (assert (useFreeTime  (id_person ?person_id) (minDate ?minDate) (maxDate ?maxDate) 
                        (minHour ?minHour)  (minMinute ?minMinute)  (minSecond ?minSecond) 
                        (maxHour ?maxHourRequest)  (maxMinute ?maxMinuteRequest)  (maxSecond ?maxSecondRequest) (id_weekday ?id_weekday)))
)

(defrule create-used-freeTime-3
  (initial-fact)
  (event (name ?event_name) (hour ?event_hour) (minute ?event_minute) (second ?event_second))
  (eventRequest (group_name ?eventRequest_group_name) (date ?eventRequest_date) (name ?eventRequest_name)
                  (minHour ?minHourRequest)  (minMinute ?minMinuteRequest)  (minSecond ?minSecondRequest) 
                  (maxHour ?maxHourRequest)  (maxMinute ?maxMinuteRequest)  (maxSecond ?maxSecondRequest))
  (personGroup (group_name ?personGroup_group_name) (person_name ?personGroup_person_name))
  (person (id ?id) (name ?person_name))
  (freeTime (id_person ?person_id) (minDate ?minDate) (maxDate ?maxDate) 
            (minHour ?minHour)  (minMinute ?minMinute)  (minSecond ?minSecond) 
            (maxHour ?maxHour)  (maxMinute ?maxMinute)  (maxSecond ?maxSecond) (id_weekday ?id_weekday))
  (test (and  (eq ?eventRequest_group_name ?personGroup_group_name)
              (eq ?personGroup_person_name ?person_name)
              (= ?person_id ?id)
              (eq ?minDate ?eventRequest_date)
              (eq ?event_name ?eventRequest_name)
              (<= (+ (* (+ (* ?event_hour 60) ?event_minute) 60) ?event_second) 
                  (- (+ (* (+ (* ?maxHourRequest 60) ?maxMinuteRequest) 60) ?maxSecondRequest) (+ (* (+ (* ?minHour 60) ?minMinute) 60) ?minSecond))
                  )
              (<= (+ (* (+ (* ?minHourRequest 60) ?minMinuteRequest) 60) ?minSecondRequest)
                  (+ (* (+ (* ?maxHour 60) ?maxMinute) 60) ?maxSecond)
              )
              (>= (+ (* (+ (* ?maxHourRequest 60) ?maxMinuteRequest) 60) ?maxSecondRequest)
                  (+ (* (+ (* ?maxHour 60) ?maxMinute) 60) ?maxSecond)
              )
              (> (+ (* (+ (* ?minHourRequest 60) ?minMinuteRequest) 60) ?minSecondRequest)
                  (+ (* (+ (* ?minHour 60) ?minMinute) 60) ?minSecond)
              )
        )
  )
  =>
  (assert (useFreeTime  (id_person ?person_id) (minDate ?minDate) (maxDate ?maxDate) 
                        (minHour ?minHourRequest)  (minMinute ?minMinuteRequest)  (minSecond ?minSecondRequest) 
                        (maxHour ?maxHour)  (maxMinute ?maxMinute)  (maxSecond ?maxSecond) (id_weekday ?id_weekday)))
)

(defrule create-used-freeTime-4
  (initial-fact)
  (event (name ?event_name) (hour ?event_hour) (minute ?event_minute) (second ?event_second))
  (eventRequest (group_name ?eventRequest_group_name) (date ?eventRequest_date) (name ?eventRequest_name)
                  (minHour ?minHourRequest)  (minMinute ?minMinuteRequest)  (minSecond ?minSecondRequest) 
                  (maxHour ?maxHourRequest)  (maxMinute ?maxMinuteRequest)  (maxSecond ?maxSecondRequest))
  (personGroup (group_name ?personGroup_group_name) (person_name ?personGroup_person_name))
  (person (id ?id) (name ?person_name))
  (freeTime (id_person ?person_id) (minDate ?minDate) (maxDate ?maxDate) 
            (minHour ?minHour)  (minMinute ?minMinute)  (minSecond ?minSecond) 
            (maxHour ?maxHour)  (maxMinute ?maxMinute)  (maxSecond ?maxSecond) (id_weekday ?id_weekday))
  (test (and  (eq ?eventRequest_group_name ?personGroup_group_name)
              (eq ?personGroup_person_name ?person_name)
              (= ?person_id ?id)
              (eq ?minDate ?eventRequest_date)
              (eq ?event_name ?eventRequest_name)
              (<= (+ (* (+ (* ?event_hour 60) ?event_minute) 60) ?event_second) 
                  (- (+ (* (+ (* ?maxHourRequest 60) ?maxMinuteRequest) 60) ?maxSecondRequest) (+ (* (+ (* ?minHourRequest 60) ?minMinuteRequest) 60) ?minSecondRequest))
                  )
              (> (+ (* (+ (* ?minHourRequest 60) ?minMinuteRequest) 60) ?minSecondRequest)
                  (+ (* (+ (* ?minHour 60) ?minMinute) 60) ?minSecond)
              )
              (< (+ (* (+ (* ?maxHourRequest 60) ?maxMinuteRequest) 60) ?maxSecondRequest)
                  (+ (* (+ (* ?maxHour 60) ?maxMinute) 60) ?maxSecond)
              )
        )
  )
  =>
  (assert (useFreeTime  (id_person ?person_id) (minDate ?minDate) (maxDate ?maxDate) 
                        (minHour ?minHourRequest)  (minMinute ?minMinuteRequest)  (minSecond ?minSecondRequest) 
                        (maxHour ?maxHourRequest)  (maxMinute ?maxMinuteRequest)  (maxSecond ?maxSecondRequest) (id_weekday ?id_weekday)))
)

(defrule create-general-freeTime-onePerson
  (initial-fact)
  (one-person)
  (useFreeTime  (id_person ?person_id) (minDate ?minDate) (maxDate ?maxDate) 
                (minHour ?minHour)  (minMinute ?minMinute)  (minSecond ?minSecond) 
                (maxHour ?maxHour)  (maxMinute ?maxMinute)  (maxSecond ?maxSecond) (id_weekday ?id_weekday))                
  (event (name ?event_name) (hour ?event_hour)  (minute ?event_minute) (second ?event_second))
  (eventRequest (name ?eventRequest_name))
  (test (and  (eq ?event_name ?eventRequest_name)
              (>= (-  (+  (+ (* ?maxHour 3600) (* ?maxMinute 60)) 
                          ?maxSecond)
                      (+  (+ (* ?minHour 3600) (* ?minMinute 60)) 
                          ?minSecond))
                  (+  (* ?event_hour 3600) (* ?event_minute 60)
                      ?event_second))))
  =>
  (assert (generalFreeTime (minDate ?minDate) (maxDate ?maxDate) 
                                  (minHour ?minHour)  (minMinute ?minMinute)  (minSecond ?minSecond) 
                                  (maxHour ?maxHour)  (maxMinute ?maxMinute)  (maxSecond ?maxSecond) (id_weekday ?id_weekday)))
)

(defrule create-general-freeTime-onePerson
  (initial-fact)
  (one-person)
  (useFreeTime  (id_person ?person_id) (minDate ?minDate) (maxDate ?maxDate) 
                (minHour ?minHour)  (minMinute ?minMinute)  (minSecond ?minSecond) 
                (maxHour ?maxHour)  (maxMinute ?maxMinute)  (maxSecond ?maxSecond) (id_weekday ?id_weekday))                
  (event (name ?event_name) (hour ?event_hour)  (minute ?event_minute) (second ?event_second))
  (eventRequest (name ?eventRequest_name))
  (test (and  (eq ?event_name ?eventRequest_name)
              (< (-  (+  (+ (* ?maxHour 3600) (* ?maxMinute 60)) 
                          ?maxSecond)
                      (+  (+ (* ?minHour 3600) (* ?minMinute 60)) 
                          ?minSecond))
                  (+  (* ?event_hour 3600) (* ?event_minute 60)
                      ?event_second))))
  =>
  (assert (answer (text "В этот день не получится")))
)

(defrule create-general-freeTime-twoPerson-1
  (two-person)
  (useFreeTime  (id_person ?person_id1) (minDate ?minDate1) (maxDate ?maxDate1) 
                (minHour ?minHour1)  (minMinute ?minMinute1)  (minSecond ?minSecond1) 
                (maxHour ?maxHour1)  (maxMinute ?maxMinute1)  (maxSecond ?maxSecond1) (id_weekday ?id_weekday1))
  (useFreeTime  (id_person ?person_id2) (minDate ?minDate2) (maxDate ?maxDate2) 
                (minHour ?minHour2)  (minMinute ?minMinute2)  (minSecond ?minSecond2) 
                (maxHour ?maxHour2)  (maxMinute ?maxMinute2)  (maxSecond ?maxSecond2) (id_weekday ?id_weekday2))                
  (event (name ?event_name) (hour ?event_hour)  (minute ?event_minute) (second ?event_second))
  (eventRequest (name ?eventRequest_name))
  (test (and(<> ?person_id1 ?person_id2)
            (eq ?event_name ?eventRequest_name)
            (and  (>= ?minHour1 ?minHour2)
                  (< ?minHour1 ?maxHour2)
                  (>= ?maxHour1 ?maxHour2)
                  (>= (-  (+  (+ (* ?maxHour2 3600) (* ?maxMinute2 60)) 
                              ?maxSecond2)
                          (+  (+ (* ?minHour1 3600) (* ?minMinute1 60)) 
                              ?minSecond1))
                      (+  (+ (* ?event_hour 3600) (* ?event_minute 60)) 
                          ?event_second))
    )))
  =>
  (assert (generalFreeTime (minDate ?minDate2) (maxDate ?maxDate2) 
                                  (minHour ?minHour1)  (minMinute ?minMinute1)  (minSecond ?minSecond1) 
                                  (maxHour ?maxHour2)  (maxMinute ?maxMinute2)  (maxSecond ?maxSecond2) (id_weekday ?id_weekday2)))
)

(defrule create-general-freeTime-twoPerson-2
  (two-person)
  (useFreeTime  (id_person ?person_id1) (minDate ?minDate1) (maxDate ?maxDate1) 
                (minHour ?minHour1)  (minMinute ?minMinute1)  (minSecond ?minSecond1) 
                (maxHour ?maxHour1)  (maxMinute ?maxMinute1)  (maxSecond ?maxSecond1) (id_weekday ?id_weekday1))
  (useFreeTime  (id_person ?person_id2) (minDate ?minDate2) (maxDate ?maxDate2) 
                (minHour ?minHour2)  (minMinute ?minMinute2)  (minSecond ?minSecond2) 
                (maxHour ?maxHour2)  (maxMinute ?maxMinute2)  (maxSecond ?maxSecond2) (id_weekday ?id_weekday2))                
  (event (name ?event_name) (hour ?event_hour)  (minute ?event_minute) (second ?event_second))
  (eventRequest (name ?eventRequest_name))
  (test (and(<> ?person_id1 ?person_id2)
            (eq ?event_name ?eventRequest_name)
            (and  (<= ?minHour1 ?minHour2)
                  (> ?maxHour1 ?minHour2)
                  (<= ?maxHour1 ?maxHour2)
                  (>= (-  (+  (+ (* ?maxHour1 3600) (* ?maxMinute1 60)) 
                              ?maxSecond1)
                          (+  (+ (* ?minHour2 3600) (* ?minMinute2 60)) 
                              ?minSecond2))
                      (+  (+ (* ?event_hour 3600) (* ?event_minute 60)) 
                          ?event_second)))))
  =>
  (assert (generalFreeTime (minDate ?minDate2) (maxDate ?maxDate2) 
                                  (minHour ?minHour2)  (minMinute ?minMinute2)  (minSecond ?minSecond2) 
                                  (maxHour ?maxHour1)  (maxMinute ?maxMinute1)  (maxSecond ?maxSecond1) (id_weekday ?id_weekday2)))
)

(defrule create-general-freeTime-twoPerson-3
  (two-person)
  (useFreeTime  (id_person ?person_id1) (minDate ?minDate1) (maxDate ?maxDate1) 
                (minHour ?minHour1)  (minMinute ?minMinute1)  (minSecond ?minSecond1) 
                (maxHour ?maxHour1)  (maxMinute ?maxMinute1)  (maxSecond ?maxSecond1) (id_weekday ?id_weekday1))
  (useFreeTime  (id_person ?person_id2) (minDate ?minDate2) (maxDate ?maxDate2) 
                (minHour ?minHour2)  (minMinute ?minMinute2)  (minSecond ?minSecond2) 
                (maxHour ?maxHour2)  (maxMinute ?maxMinute2)  (maxSecond ?maxSecond2) (id_weekday ?id_weekday2))                
  (event (name ?event_name) (hour ?event_hour)  (minute ?event_minute) (second ?event_second))
  (eventRequest (name ?eventRequest_name))
  (test (and(<> ?person_id1 ?person_id2)
            (eq ?event_name ?eventRequest_name)
            (and  (<= ?minHour1 ?minHour2)
                  (>= ?maxHour1 ?maxHour2)
                  (>= (-  (+  (+ (* ?maxHour2 3600) (* ?maxMinute2 60)) 
                              ?maxSecond2)
                          (+  (+ (* ?minHour2 3600) (* ?minMinute2 60)) 
                              ?minSecond2))
                      (+  (+ (* ?event_hour 3600) (* ?event_minute 60)) 
                          ?event_second)))))
  =>
  (assert (generalFreeTime (minDate ?minDate2) (maxDate ?maxDate2) 
                                  (minHour ?minHour2)  (minMinute ?minMinute2)  (minSecond ?minSecond2) 
                                  (maxHour ?maxHour2)  (maxMinute ?maxMinute2)  (maxSecond ?maxSecond2) (id_weekday ?id_weekday2)))
)

(defrule create-general-freeTime-twoPerson-4
  (two-person)
  (useFreeTime  (id_person ?person_id1) (minDate ?minDate1) (maxDate ?maxDate1) 
                (minHour ?minHour1)  (minMinute ?minMinute1)  (minSecond ?minSecond1) 
                (maxHour ?maxHour1)  (maxMinute ?maxMinute1)  (maxSecond ?maxSecond1) (id_weekday ?id_weekday1))
  (useFreeTime  (id_person ?person_id2) (minDate ?minDate2) (maxDate ?maxDate2) 
                (minHour ?minHour2)  (minMinute ?minMinute2)  (minSecond ?minSecond2) 
                (maxHour ?maxHour2)  (maxMinute ?maxMinute2)  (maxSecond ?maxSecond2) (id_weekday ?id_weekday2))                
  (event (name ?event_name) (hour ?event_hour)  (minute ?event_minute) (second ?event_second))
  (eventRequest (name ?eventRequest_name))
  (test (and(<> ?person_id1 ?person_id2)
            (eq ?event_name ?eventRequest_name)
            (and  (>= ?minHour1 ?minHour2)
                  (<= ?maxHour1 ?maxHour2)
                  (>= (-  (+  (+ (* ?maxHour1 3600) (* ?maxMinute1 60)) 
                              ?maxSecond1)
                          (+  (+ (* ?minHour1 3600) (* ?minMinute1 60)) 
                              ?minSecond1))
                      (+  (+ (* ?event_hour 3600) (* ?event_minute 60)) 
                          ?event_second)))))
  =>
  (assert (generalFreeTime (minDate ?minDate2) (maxDate ?maxDate2) 
                                  (minHour ?minHour1)  (minMinute ?minMinute1)  (minSecond ?minSecond1) 
                                  (maxHour ?maxHour1)  (maxMinute ?maxMinute1)  (maxSecond ?maxSecond1) (id_weekday ?id_weekday2)))
)

(defrule create-general-freeTime-twoPerson-negative-answer
  (two-person)
  (useFreeTime  (id_person ?person_id1) (minDate ?minDate1) (maxDate ?maxDate1) 
                (minHour ?minHour1)  (minMinute ?minMinute1)  (minSecond ?minSecond1) 
                (maxHour ?maxHour1)  (maxMinute ?maxMinute1)  (maxSecond ?maxSecond1) (id_weekday ?id_weekday1))
  (useFreeTime  (id_person ?person_id2) (minDate ?minDate2) (maxDate ?maxDate2) 
                (minHour ?minHour2)  (minMinute ?minMinute2)  (minSecond ?minSecond2) 
                (maxHour ?maxHour2)  (maxMinute ?maxMinute2)  (maxSecond ?maxSecond2) (id_weekday ?id_weekday2))                
  (event (name ?event_name) (hour ?event_hour)  (minute ?event_minute) (second ?event_second))
  (eventRequest (name ?eventRequest_name))
  (test (and(<> ?person_id1 ?person_id2)
            (eq ?event_name ?eventRequest_name)
            (not (and  (>= ?minHour1 ?minHour2)
                  (< ?minHour1 ?maxHour2)
                  (>= ?maxHour1 ?maxHour2)
                  (>= (-  (+  (+ (* ?maxHour2 3600) (* ?maxMinute2 60)) 
                              ?maxSecond2)
                          (+  (+ (* ?minHour1 3600) (* ?minMinute1 60)) 
                              ?minSecond1))
                      (+  (+ (* ?event_hour 3600) (* ?event_minute 60)) 
                          ?event_second))
    ))
            (not (and  (<= ?minHour1 ?minHour2)
                  (> ?maxHour1 ?minHour2)
                  (<= ?maxHour1 ?maxHour2)
                  (>= (-  (+  (+ (* ?maxHour1 3600) (* ?maxMinute1 60)) 
                              ?maxSecond1)
                          (+  (+ (* ?minHour2 3600) (* ?minMinute2 60)) 
                              ?minSecond2))
                      (+  (+ (* ?event_hour 3600) (* ?event_minute 60)) 
                          ?event_second))))
            (not (and  (<= ?minHour1 ?minHour2)
                  (>= ?maxHour1 ?maxHour2)
                  (>= (-  (+  (+ (* ?maxHour2 3600) (* ?maxMinute2 60)) 
                              ?maxSecond2)
                          (+  (+ (* ?minHour2 3600) (* ?minMinute2 60)) 
                              ?minSecond2))
                      (+  (+ (* ?event_hour 3600) (* ?event_minute 60)) 
                          ?event_second))))
            (not (and  (>= ?minHour1 ?minHour2)
                  (<= ?maxHour1 ?maxHour2)
                  (>= (-  (+  (+ (* ?maxHour1 3600) (* ?maxMinute1 60)) 
                              ?maxSecond1)
                          (+  (+ (* ?minHour1 3600) (* ?minMinute1 60)) 
                              ?minSecond1))
                      (+  (+ (* ?event_hour 3600) (* ?event_minute 60)) 
                          ?event_second))))
            ))
  =>
  (assert (answer (text "В этот день не получится")))
)

(defrule create-general-freeTime-threePerson-1
  (three-person)
  (useFreeTime  (id_person ?person_id1) (minDate ?minDate1) (maxDate ?maxDate1) 
                (minHour ?minHour1)  (minMinute ?minMinute1)  (minSecond ?minSecond1) 
                (maxHour ?maxHour1)  (maxMinute ?maxMinute1)  (maxSecond ?maxSecond1) (id_weekday ?id_weekday1))
  (useFreeTime  (id_person ?person_id2) (minDate ?minDate2) (maxDate ?maxDate2) 
                (minHour ?minHour2)  (minMinute ?minMinute2)  (minSecond ?minSecond2) 
                (maxHour ?maxHour2)  (maxMinute ?maxMinute2)  (maxSecond ?maxSecond2) (id_weekday ?id_weekday2))   
  (useFreeTime  (id_person ?person_id3) (minDate ?minDate3) (maxDate ?maxDate3) 
                (minHour ?minHour3)  (minMinute ?minMinute3)  (minSecond ?minSecond3) 
                (maxHour ?maxHour3)  (maxMinute ?maxMinute3)  (maxSecond ?maxSecond3) (id_weekday ?id_weekday3))              
  (event (name ?event_name) (hour ?event_hour)  (minute ?event_minute) (second ?event_second))
  (eventRequest (name ?eventRequest_name))
  (test (and(<> ?person_id1 ?person_id2)
            (<> ?person_id2 ?person_id3)
            (<> ?person_id3 ?person_id1)
            (eq ?event_name ?eventRequest_name)

            (>= ?minHour1 ?minHour2)
            (>= ?minHour1 ?minHour3)
            
            (<= ?maxHour1 ?maxHour2)
            (<= ?maxHour1 ?maxHour3)
            
            (>=  (-  (+  (+ (* ?maxHour1 3600) (* ?maxMinute1 60)) 
                            ?maxSecond1)
                          (+  (+ (* ?minHour1 3600) (* ?minMinute1 60)) 
                              ?minSecond1))
                      (+  (+ (* ?event_hour 3600) (* ?event_minute 60)) 
                          ?event_second))
            ))
  =>
  (assert (generalFreeTime (minDate ?minDate1) (maxDate ?maxDate1) 
                          (minHour ?minHour1)  (minMinute ?minMinute1)  (minSecond ?minSecond1) 
                          (maxHour ?maxHour1)  (maxMinute ?maxMinute1)  (maxSecond ?maxSecond1) (id_weekday ?id_weekday2)))
)

(defrule create-general-freeTime-threePerson-1-negative
  (three-person)
  (useFreeTime  (id_person ?person_id1) (minDate ?minDate1) (maxDate ?maxDate1) 
                (minHour ?minHour1)  (minMinute ?minMinute1)  (minSecond ?minSecond1) 
                (maxHour ?maxHour1)  (maxMinute ?maxMinute1)  (maxSecond ?maxSecond1) (id_weekday ?id_weekday1))
  (useFreeTime  (id_person ?person_id2) (minDate ?minDate2) (maxDate ?maxDate2) 
                (minHour ?minHour2)  (minMinute ?minMinute2)  (minSecond ?minSecond2) 
                (maxHour ?maxHour2)  (maxMinute ?maxMinute2)  (maxSecond ?maxSecond2) (id_weekday ?id_weekday2))   
  (useFreeTime  (id_person ?person_id3) (minDate ?minDate3) (maxDate ?maxDate3) 
                (minHour ?minHour3)  (minMinute ?minMinute3)  (minSecond ?minSecond3) 
                (maxHour ?maxHour3)  (maxMinute ?maxMinute3)  (maxSecond ?maxSecond3) (id_weekday ?id_weekday3))              
  (event (name ?event_name) (hour ?event_hour)  (minute ?event_minute) (second ?event_second))
  (eventRequest (name ?eventRequest_name))
  (test (and(<> ?person_id1 ?person_id2)
            (<> ?person_id2 ?person_id3)
            (<> ?person_id3 ?person_id1)
            (eq ?event_name ?eventRequest_name)

            (>= ?minHour1 ?minHour2)
            (>= ?minHour1 ?minHour3)
            
            (<= ?maxHour1 ?maxHour2)
            (<= ?maxHour1 ?maxHour3)
            
            (not (>=  (-  (+  (+ (* ?maxHour1 3600) (* ?maxMinute1 60)) 
                            ?maxSecond1)
                          (+  (+ (* ?minHour1 3600) (* ?minMinute1 60)) 
                              ?minSecond1))
                      (+  (+ (* ?event_hour 3600) (* ?event_minute 60)) 
                          ?event_second)))
            ))
  =>
  (assert (answer (text "В этот день не получится")))
)

(defrule create-general-freeTime-threePerson-2
  (three-person)
  (useFreeTime  (id_person ?person_id1) (minDate ?minDate1) (maxDate ?maxDate1) 
                (minHour ?minHour1)  (minMinute ?minMinute1)  (minSecond ?minSecond1) 
                (maxHour ?maxHour1)  (maxMinute ?maxMinute1)  (maxSecond ?maxSecond1) (id_weekday ?id_weekday1))
  (useFreeTime  (id_person ?person_id2) (minDate ?minDate2) (maxDate ?maxDate2) 
                (minHour ?minHour2)  (minMinute ?minMinute2)  (minSecond ?minSecond2) 
                (maxHour ?maxHour2)  (maxMinute ?maxMinute2)  (maxSecond ?maxSecond2) (id_weekday ?id_weekday2))   
  (useFreeTime  (id_person ?person_id3) (minDate ?minDate3) (maxDate ?maxDate3) 
                (minHour ?minHour3)  (minMinute ?minMinute3)  (minSecond ?minSecond3) 
                (maxHour ?maxHour3)  (maxMinute ?maxMinute3)  (maxSecond ?maxSecond3) (id_weekday ?id_weekday3))              
  (event (name ?event_name) (hour ?event_hour)  (minute ?event_minute) (second ?event_second))
  (eventRequest (name ?eventRequest_name))
  (test (and(<> ?person_id1 ?person_id2)
            (<> ?person_id2 ?person_id3)
            (<> ?person_id3 ?person_id1)
            (eq ?event_name ?eventRequest_name)

            (>= ?minHour1 ?minHour2)
            (>= ?minHour1 ?minHour3)

            (not  (and  (<= ?maxHour1 ?maxHour2)
                        (<= ?maxHour1 ?maxHour3)))
            
            (<= ?maxHour2 ?maxHour1)
            (<= ?maxHour2 ?maxHour3)
            
            (>=  (-  (+  (+ (* ?maxHour2 3600) (* ?maxMinute2 60)) 
                            ?maxSecond2)
                          (+  (+ (* ?minHour1 3600) (* ?minMinute1 60)) 
                              ?minSecond1))
                      (+  (+ (* ?event_hour 3600) (* ?event_minute 60)) 
                          ?event_second))
            ))
  =>
  (assert (generalFreeTime (minDate ?minDate1) (maxDate ?maxDate1) 
                          (minHour ?minHour1)  (minMinute ?minMinute1)  (minSecond ?minSecond1) 
                          (maxHour ?maxHour2)  (maxMinute ?maxMinute2)  (maxSecond ?maxSecond2) (id_weekday ?id_weekday2)))
)

(defrule create-general-freeTime-threePerson-2-negative
  (three-person)
  (useFreeTime  (id_person ?person_id1) (minDate ?minDate1) (maxDate ?maxDate1) 
                (minHour ?minHour1)  (minMinute ?minMinute1)  (minSecond ?minSecond1) 
                (maxHour ?maxHour1)  (maxMinute ?maxMinute1)  (maxSecond ?maxSecond1) (id_weekday ?id_weekday1))
  (useFreeTime  (id_person ?person_id2) (minDate ?minDate2) (maxDate ?maxDate2) 
                (minHour ?minHour2)  (minMinute ?minMinute2)  (minSecond ?minSecond2) 
                (maxHour ?maxHour2)  (maxMinute ?maxMinute2)  (maxSecond ?maxSecond2) (id_weekday ?id_weekday2))   
  (useFreeTime  (id_person ?person_id3) (minDate ?minDate3) (maxDate ?maxDate3) 
                (minHour ?minHour3)  (minMinute ?minMinute3)  (minSecond ?minSecond3) 
                (maxHour ?maxHour3)  (maxMinute ?maxMinute3)  (maxSecond ?maxSecond3) (id_weekday ?id_weekday3))              
  (event (name ?event_name) (hour ?event_hour)  (minute ?event_minute) (second ?event_second))
  (eventRequest (name ?eventRequest_name))
  (test (and(<> ?person_id1 ?person_id2)
            (<> ?person_id2 ?person_id3)
            (<> ?person_id3 ?person_id1)
            (eq ?event_name ?eventRequest_name)

            (>= ?minHour1 ?minHour2)
            (>= ?minHour1 ?minHour3)

            (not  (and  (<= ?maxHour1 ?maxHour2)
                        (<= ?maxHour1 ?maxHour3)))
            
            (<= ?maxHour2 ?maxHour1)
            (<= ?maxHour2 ?maxHour3)
            
            (not (>=  (-  (+  (+ (* ?maxHour2 3600) (* ?maxMinute2 60)) 
                            ?maxSecond2)
                          (+  (+ (* ?minHour1 3600) (* ?minMinute1 60)) 
                              ?minSecond1))
                      (+  (+ (* ?event_hour 3600) (* ?event_minute 60)) 
                          ?event_second)))
            ))
  =>
  (assert (answer (text "В этот день не получится")))
)

(defrule create-general-freeTime-threePerson-3
  (three-person)
  (useFreeTime  (id_person ?person_id1) (minDate ?minDate1) (maxDate ?maxDate1) 
                (minHour ?minHour1)  (minMinute ?minMinute1)  (minSecond ?minSecond1) 
                (maxHour ?maxHour1)  (maxMinute ?maxMinute1)  (maxSecond ?maxSecond1) (id_weekday ?id_weekday1))
  (useFreeTime  (id_person ?person_id2) (minDate ?minDate2) (maxDate ?maxDate2) 
                (minHour ?minHour2)  (minMinute ?minMinute2)  (minSecond ?minSecond2) 
                (maxHour ?maxHour2)  (maxMinute ?maxMinute2)  (maxSecond ?maxSecond2) (id_weekday ?id_weekday2))   
  (useFreeTime  (id_person ?person_id3) (minDate ?minDate3) (maxDate ?maxDate3) 
                (minHour ?minHour3)  (minMinute ?minMinute3)  (minSecond ?minSecond3) 
                (maxHour ?maxHour3)  (maxMinute ?maxMinute3)  (maxSecond ?maxSecond3) (id_weekday ?id_weekday3))              
  (event (name ?event_name) (hour ?event_hour)  (minute ?event_minute) (second ?event_second))
  (eventRequest (name ?eventRequest_name))
  (test (and(<> ?person_id1 ?person_id2)
            (<> ?person_id2 ?person_id3)
            (<> ?person_id3 ?person_id1)
            (eq ?event_name ?eventRequest_name)

            (>= ?minHour1 ?minHour2)
            (>= ?minHour1 ?minHour3)

            (not  (and  (<= ?maxHour1 ?maxHour2)
                        (<= ?maxHour1 ?maxHour3)))

            (not  (and  (<= ?maxHour2 ?maxHour1)
                        (<= ?maxHour2 ?maxHour3)))
            
            (<= ?maxHour3 ?maxHour1)
            (<= ?maxHour3 ?maxHour2)
            
            (>=  (-  (+  (+ (* ?maxHour3 3600) (* ?maxMinute3 60)) 
                            ?maxSecond3)
                          (+  (+ (* ?minHour1 3600) (* ?minMinute1 60)) 
                              ?minSecond1))
                      (+  (+ (* ?event_hour 3600) (* ?event_minute 60)) 
                          ?event_second))
            ))
  =>
  (assert (generalFreeTime (minDate ?minDate1) (maxDate ?maxDate1) 
                    (minHour ?minHour1)  (minMinute ?minMinute1)  (minSecond ?minSecond1) 
                    (maxHour ?maxHour3)  (maxMinute ?maxMinute3)  (maxSecond ?maxSecond3) (id_weekday ?id_weekday2)))
)

(defrule create-general-freeTime-threePerson-3-negative
  (three-person)
  (useFreeTime  (id_person ?person_id1) (minDate ?minDate1) (maxDate ?maxDate1) 
                (minHour ?minHour1)  (minMinute ?minMinute1)  (minSecond ?minSecond1) 
                (maxHour ?maxHour1)  (maxMinute ?maxMinute1)  (maxSecond ?maxSecond1) (id_weekday ?id_weekday1))
  (useFreeTime  (id_person ?person_id2) (minDate ?minDate2) (maxDate ?maxDate2) 
                (minHour ?minHour2)  (minMinute ?minMinute2)  (minSecond ?minSecond2) 
                (maxHour ?maxHour2)  (maxMinute ?maxMinute2)  (maxSecond ?maxSecond2) (id_weekday ?id_weekday2))   
  (useFreeTime  (id_person ?person_id3) (minDate ?minDate3) (maxDate ?maxDate3) 
                (minHour ?minHour3)  (minMinute ?minMinute3)  (minSecond ?minSecond3) 
                (maxHour ?maxHour3)  (maxMinute ?maxMinute3)  (maxSecond ?maxSecond3) (id_weekday ?id_weekday3))              
  (event (name ?event_name) (hour ?event_hour)  (minute ?event_minute) (second ?event_second))
  (eventRequest (name ?eventRequest_name))
  (test (and(<> ?person_id1 ?person_id2)
            (<> ?person_id2 ?person_id3)
            (<> ?person_id3 ?person_id1)
            (eq ?event_name ?eventRequest_name)

            (>= ?minHour1 ?minHour2)
            (>= ?minHour1 ?minHour3)

            (not  (and  (<= ?maxHour1 ?maxHour2)
                        (<= ?maxHour1 ?maxHour3)))

            (not  (and  (<= ?maxHour2 ?maxHour1)
                        (<= ?maxHour2 ?maxHour3)))
            
            (<= ?maxHour3 ?maxHour1)
            (<= ?maxHour3 ?maxHour2)
            
            (not (>=  (-  (+  (+ (* ?maxHour3 3600) (* ?maxMinute3 60)) 
                            ?maxSecond3)
                          (+  (+ (* ?minHour1 3600) (* ?minMinute1 60)) 
                              ?minSecond1))
                      (+  (+ (* ?event_hour 3600) (* ?event_minute 60)) 
                          ?event_second)))
            ))
  =>
  (assert (answer (text "В этот день не получится")))
)

(defrule create-general-freeTime-threePerson-4
  (three-person)
  (useFreeTime  (id_person ?person_id1) (minDate ?minDate1) (maxDate ?maxDate1) 
                (minHour ?minHour1)  (minMinute ?minMinute1)  (minSecond ?minSecond1) 
                (maxHour ?maxHour1)  (maxMinute ?maxMinute1)  (maxSecond ?maxSecond1) (id_weekday ?id_weekday1))
  (useFreeTime  (id_person ?person_id2) (minDate ?minDate2) (maxDate ?maxDate2) 
                (minHour ?minHour2)  (minMinute ?minMinute2)  (minSecond ?minSecond2) 
                (maxHour ?maxHour2)  (maxMinute ?maxMinute2)  (maxSecond ?maxSecond2) (id_weekday ?id_weekday2))   
  (useFreeTime  (id_person ?person_id3) (minDate ?minDate3) (maxDate ?maxDate3) 
                (minHour ?minHour3)  (minMinute ?minMinute3)  (minSecond ?minSecond3) 
                (maxHour ?maxHour3)  (maxMinute ?maxMinute3)  (maxSecond ?maxSecond3) (id_weekday ?id_weekday3))              
  (event (name ?event_name) (hour ?event_hour)  (minute ?event_minute) (second ?event_second))
  (eventRequest (name ?eventRequest_name))
  (test (and(<> ?person_id1 ?person_id2)
            (<> ?person_id2 ?person_id3)
            (<> ?person_id3 ?person_id1)
            (eq ?event_name ?eventRequest_name)

            (not  (and  (>= ?minHour1 ?minHour2)
                        (>= ?minHour1 ?minHour3)))

            (>= ?minHour2 ?minHour1)
            (>= ?minHour2 ?minHour3)
            
            (<= ?maxHour1 ?maxHour2)
            (<= ?maxHour1 ?maxHour3)
            
            (>=  (-  (+  (+ (* ?maxHour1 3600) (* ?maxMinute1 60)) 
                            ?maxSecond1)
                          (+  (+ (* ?minHour2 3600) (* ?minMinute2 60)) 
                              ?minSecond2))
                      (+  (+ (* ?event_hour 3600) (* ?event_minute 60)) 
                          ?event_second))
            ))
  =>
  (assert (generalFreeTime (minDate ?minDate1) (maxDate ?maxDate1) 
                    (minHour ?minHour2)  (minMinute ?minMinute2)  (minSecond ?minSecond2) 
                    (maxHour ?maxHour1)  (maxMinute ?maxMinute1)  (maxSecond ?maxSecond1) (id_weekday ?id_weekday2)))
)

(defrule create-general-freeTime-threePerson-4-negative
  (three-person)
  (useFreeTime  (id_person ?person_id1) (minDate ?minDate1) (maxDate ?maxDate1) 
                (minHour ?minHour1)  (minMinute ?minMinute1)  (minSecond ?minSecond1) 
                (maxHour ?maxHour1)  (maxMinute ?maxMinute1)  (maxSecond ?maxSecond1) (id_weekday ?id_weekday1))
  (useFreeTime  (id_person ?person_id2) (minDate ?minDate2) (maxDate ?maxDate2) 
                (minHour ?minHour2)  (minMinute ?minMinute2)  (minSecond ?minSecond2) 
                (maxHour ?maxHour2)  (maxMinute ?maxMinute2)  (maxSecond ?maxSecond2) (id_weekday ?id_weekday2))   
  (useFreeTime  (id_person ?person_id3) (minDate ?minDate3) (maxDate ?maxDate3) 
                (minHour ?minHour3)  (minMinute ?minMinute3)  (minSecond ?minSecond3) 
                (maxHour ?maxHour3)  (maxMinute ?maxMinute3)  (maxSecond ?maxSecond3) (id_weekday ?id_weekday3))              
  (event (name ?event_name) (hour ?event_hour)  (minute ?event_minute) (second ?event_second))
  (eventRequest (name ?eventRequest_name))
  (test (and(<> ?person_id1 ?person_id2)
            (<> ?person_id2 ?person_id3)
            (<> ?person_id3 ?person_id1)
            (eq ?event_name ?eventRequest_name)

            (not  (and  (>= ?minHour1 ?minHour2)
                        (>= ?minHour1 ?minHour3)))

            (>= ?minHour2 ?minHour1)
            (>= ?minHour2 ?minHour3)
            
            (<= ?maxHour1 ?maxHour2)
            (<= ?maxHour1 ?maxHour3)
            
            (not (>=  (-  (+  (+ (* ?maxHour1 3600) (* ?maxMinute1 60)) 
                            ?maxSecond1)
                          (+  (+ (* ?minHour2 3600) (* ?minMinute2 60)) 
                              ?minSecond2))
                      (+  (+ (* ?event_hour 3600) (* ?event_minute 60)) 
                          ?event_second)))
            ))
  =>
  (assert (answer (text "В этот день не получится")))
)

(defrule create-general-freeTime-threePerson-5
  (three-person)
  (useFreeTime  (id_person ?person_id1) (minDate ?minDate1) (maxDate ?maxDate1) 
                (minHour ?minHour1)  (minMinute ?minMinute1)  (minSecond ?minSecond1) 
                (maxHour ?maxHour1)  (maxMinute ?maxMinute1)  (maxSecond ?maxSecond1) (id_weekday ?id_weekday1))
  (useFreeTime  (id_person ?person_id2) (minDate ?minDate2) (maxDate ?maxDate2) 
                (minHour ?minHour2)  (minMinute ?minMinute2)  (minSecond ?minSecond2) 
                (maxHour ?maxHour2)  (maxMinute ?maxMinute2)  (maxSecond ?maxSecond2) (id_weekday ?id_weekday2))   
  (useFreeTime  (id_person ?person_id3) (minDate ?minDate3) (maxDate ?maxDate3) 
                (minHour ?minHour3)  (minMinute ?minMinute3)  (minSecond ?minSecond3) 
                (maxHour ?maxHour3)  (maxMinute ?maxMinute3)  (maxSecond ?maxSecond3) (id_weekday ?id_weekday3))              
  (event (name ?event_name) (hour ?event_hour)  (minute ?event_minute) (second ?event_second))
  (eventRequest (name ?eventRequest_name))
  (test (and(<> ?person_id1 ?person_id2)
            (<> ?person_id2 ?person_id3)
            (<> ?person_id3 ?person_id1)
            (eq ?event_name ?eventRequest_name)

            (not  (and  (>= ?minHour1 ?minHour2)
                        (>= ?minHour1 ?minHour3)))

            (>= ?minHour2 ?minHour1)
            (>= ?minHour2 ?minHour3)

            (not  (and  (<= ?maxHour1 ?maxHour2)
                        (<= ?maxHour1 ?maxHour3)))
            
            (<= ?maxHour2 ?maxHour1)
            (<= ?maxHour2 ?maxHour3)
            
            (>=  (-  (+  (+ (* ?maxHour2 3600) (* ?maxMinute2 60)) 
                            ?maxSecond2)
                          (+  (+ (* ?minHour2 3600) (* ?minMinute2 60)) 
                              ?minSecond2))
                      (+  (+ (* ?event_hour 3600) (* ?event_minute 60)) 
                          ?event_second))
            ))
  =>
  then (assert (generalFreeTime (minDate ?minDate1) (maxDate ?maxDate1) 
                    (minHour ?minHour2)  (minMinute ?minMinute2)  (minSecond ?minSecond2) 
                    (maxHour ?maxHour2)  (maxMinute ?maxMinute2)  (maxSecond ?maxSecond2) (id_weekday ?id_weekday2)))
)

(defrule create-general-freeTime-threePerson-5-negative
  (three-person)
  (useFreeTime  (id_person ?person_id1) (minDate ?minDate1) (maxDate ?maxDate1) 
                (minHour ?minHour1)  (minMinute ?minMinute1)  (minSecond ?minSecond1) 
                (maxHour ?maxHour1)  (maxMinute ?maxMinute1)  (maxSecond ?maxSecond1) (id_weekday ?id_weekday1))
  (useFreeTime  (id_person ?person_id2) (minDate ?minDate2) (maxDate ?maxDate2) 
                (minHour ?minHour2)  (minMinute ?minMinute2)  (minSecond ?minSecond2) 
                (maxHour ?maxHour2)  (maxMinute ?maxMinute2)  (maxSecond ?maxSecond2) (id_weekday ?id_weekday2))   
  (useFreeTime  (id_person ?person_id3) (minDate ?minDate3) (maxDate ?maxDate3) 
                (minHour ?minHour3)  (minMinute ?minMinute3)  (minSecond ?minSecond3) 
                (maxHour ?maxHour3)  (maxMinute ?maxMinute3)  (maxSecond ?maxSecond3) (id_weekday ?id_weekday3))              
  (event (name ?event_name) (hour ?event_hour)  (minute ?event_minute) (second ?event_second))
  (eventRequest (name ?eventRequest_name))
  (test (and(<> ?person_id1 ?person_id2)
            (<> ?person_id2 ?person_id3)
            (<> ?person_id3 ?person_id1)
            (eq ?event_name ?eventRequest_name)

            (not  (and  (>= ?minHour1 ?minHour2)
                        (>= ?minHour1 ?minHour3)))

            (>= ?minHour2 ?minHour1)
            (>= ?minHour2 ?minHour3)

            (not  (and  (<= ?maxHour1 ?maxHour2)
                        (<= ?maxHour1 ?maxHour3)))
            
            (<= ?maxHour2 ?maxHour1)
            (<= ?maxHour2 ?maxHour3)
            
            (not (>=  (-  (+  (+ (* ?maxHour2 3600) (* ?maxMinute2 60)) 
                            ?maxSecond2)
                          (+  (+ (* ?minHour2 3600) (* ?minMinute2 60)) 
                              ?minSecond2))
                      (+  (+ (* ?event_hour 3600) (* ?event_minute 60)) 
                          ?event_second)))
            ))
  =>
  (assert (answer (text "В этот день не получится")))
)

(defrule create-general-freeTime-threePerson-6
  (three-person)
  (useFreeTime  (id_person ?person_id1) (minDate ?minDate1) (maxDate ?maxDate1) 
                (minHour ?minHour1)  (minMinute ?minMinute1)  (minSecond ?minSecond1) 
                (maxHour ?maxHour1)  (maxMinute ?maxMinute1)  (maxSecond ?maxSecond1) (id_weekday ?id_weekday1))
  (useFreeTime  (id_person ?person_id2) (minDate ?minDate2) (maxDate ?maxDate2) 
                (minHour ?minHour2)  (minMinute ?minMinute2)  (minSecond ?minSecond2) 
                (maxHour ?maxHour2)  (maxMinute ?maxMinute2)  (maxSecond ?maxSecond2) (id_weekday ?id_weekday2))   
  (useFreeTime  (id_person ?person_id3) (minDate ?minDate3) (maxDate ?maxDate3) 
                (minHour ?minHour3)  (minMinute ?minMinute3)  (minSecond ?minSecond3) 
                (maxHour ?maxHour3)  (maxMinute ?maxMinute3)  (maxSecond ?maxSecond3) (id_weekday ?id_weekday3))              
  (event (name ?event_name) (hour ?event_hour)  (minute ?event_minute) (second ?event_second))
  (eventRequest (name ?eventRequest_name))
  (test (and(<> ?person_id1 ?person_id2)
            (<> ?person_id2 ?person_id3)
            (<> ?person_id3 ?person_id1)
            (eq ?event_name ?eventRequest_name)

            (not  (and  (>= ?minHour1 ?minHour2)
                        (>= ?minHour1 ?minHour3)))

            (>= ?minHour2 ?minHour1)
            (>= ?minHour2 ?minHour3)

            (not  (and  (<= ?maxHour1 ?maxHour2)
                        (<= ?maxHour1 ?maxHour3)))

            (not  (and  (<= ?maxHour2 ?maxHour1)
                        (<= ?maxHour2 ?maxHour3)))
            
            (<= ?maxHour3 ?maxHour1)
            (<= ?maxHour3 ?maxHour2)
            
            (>=  (-  (+  (+ (* ?maxHour3 3600) (* ?maxMinute3 60)) 
                            ?maxSecond1)
                          (+  (+ (* ?minHour2 3600) (* ?minMinute2 60)) 
                              ?minSecond1))
                      (+  (+ (* ?event_hour 3600) (* ?event_minute 60)) 
                          ?event_second))
            ))
  =>
  then (assert (generalFreeTime (minDate ?minDate1) (maxDate ?maxDate1) 
                    (minHour ?minHour2)  (minMinute ?minMinute2)  (minSecond ?minSecond2) 
                    (maxHour ?maxHour2)  (maxMinute ?maxMinute2)  (maxSecond ?maxSecond2) (id_weekday ?id_weekday2)))
)

(defrule create-general-freeTime-threePerson-6-negative
  (three-person)
  (useFreeTime  (id_person ?person_id1) (minDate ?minDate1) (maxDate ?maxDate1) 
                (minHour ?minHour1)  (minMinute ?minMinute1)  (minSecond ?minSecond1) 
                (maxHour ?maxHour1)  (maxMinute ?maxMinute1)  (maxSecond ?maxSecond1) (id_weekday ?id_weekday1))
  (useFreeTime  (id_person ?person_id2) (minDate ?minDate2) (maxDate ?maxDate2) 
                (minHour ?minHour2)  (minMinute ?minMinute2)  (minSecond ?minSecond2) 
                (maxHour ?maxHour2)  (maxMinute ?maxMinute2)  (maxSecond ?maxSecond2) (id_weekday ?id_weekday2))   
  (useFreeTime  (id_person ?person_id3) (minDate ?minDate3) (maxDate ?maxDate3) 
                (minHour ?minHour3)  (minMinute ?minMinute3)  (minSecond ?minSecond3) 
                (maxHour ?maxHour3)  (maxMinute ?maxMinute3)  (maxSecond ?maxSecond3) (id_weekday ?id_weekday3))              
  (event (name ?event_name) (hour ?event_hour)  (minute ?event_minute) (second ?event_second))
  (eventRequest (name ?eventRequest_name))
  (test (and(<> ?person_id1 ?person_id2)
            (<> ?person_id2 ?person_id3)
            (<> ?person_id3 ?person_id1)
            (eq ?event_name ?eventRequest_name)

            (not  (and  (>= ?minHour1 ?minHour2)
                        (>= ?minHour1 ?minHour3)))

            (>= ?minHour2 ?minHour1)
            (>= ?minHour2 ?minHour3)

            (not  (and  (<= ?maxHour1 ?maxHour2)
                        (<= ?maxHour1 ?maxHour3)))

            (not  (and  (<= ?maxHour2 ?maxHour1)
                        (<= ?maxHour2 ?maxHour3)))
            
            (<= ?maxHour3 ?maxHour1)
            (<= ?maxHour3 ?maxHour2)
            
            (not (>=  (-  (+  (+ (* ?maxHour3 3600) (* ?maxMinute3 60)) 
                            ?maxSecond1)
                          (+  (+ (* ?minHour2 3600) (* ?minMinute2 60)) 
                              ?minSecond1))
                      (+  (+ (* ?event_hour 3600) (* ?event_minute 60)) 
                          ?event_second)))
            ))
  =>
  (assert (answer (text "В этот день не получится")))
)

(defrule create-general-freeTime-threePerson-7
  (three-person)
  (useFreeTime  (id_person ?person_id1) (minDate ?minDate1) (maxDate ?maxDate1) 
                (minHour ?minHour1)  (minMinute ?minMinute1)  (minSecond ?minSecond1) 
                (maxHour ?maxHour1)  (maxMinute ?maxMinute1)  (maxSecond ?maxSecond1) (id_weekday ?id_weekday1))
  (useFreeTime  (id_person ?person_id2) (minDate ?minDate2) (maxDate ?maxDate2) 
                (minHour ?minHour2)  (minMinute ?minMinute2)  (minSecond ?minSecond2) 
                (maxHour ?maxHour2)  (maxMinute ?maxMinute2)  (maxSecond ?maxSecond2) (id_weekday ?id_weekday2))   
  (useFreeTime  (id_person ?person_id3) (minDate ?minDate3) (maxDate ?maxDate3) 
                (minHour ?minHour3)  (minMinute ?minMinute3)  (minSecond ?minSecond3) 
                (maxHour ?maxHour3)  (maxMinute ?maxMinute3)  (maxSecond ?maxSecond3) (id_weekday ?id_weekday3))              
  (event (name ?event_name) (hour ?event_hour)  (minute ?event_minute) (second ?event_second))
  (eventRequest (name ?eventRequest_name))
  (test (and(<> ?person_id1 ?person_id2)
            (<> ?person_id2 ?person_id3)
            (<> ?person_id3 ?person_id1)
            (eq ?event_name ?eventRequest_name)

            (not  (and  (>= ?minHour1 ?minHour2)
                        (>= ?minHour1 ?minHour3)))

            (not  (and  (>= ?minHour2 ?minHour1)
                        (>= ?minHour2 ?minHour3)))

            (>= ?minHour3 ?minHour1)
            (>= ?minHour3 ?minHour2)
            
            (<= ?maxHour1 ?maxHour2)
            (<= ?maxHour1 ?maxHour3)
            
            (>=  (-  (+  (+ (* ?maxHour1 3600) (* ?maxMinute1 60)) 
                            ?maxSecond1)
                          (+  (+ (* ?minHour3 3600) (* ?minMinute3 60)) 
                              ?minSecond3))
                      (+  (+ (* ?event_hour 3600) (* ?event_minute 60)) 
                          ?event_second))
            ))
  =>
  then (assert (generalFreeTime (minDate ?minDate1) (maxDate ?maxDate1) 
                  (minHour ?minHour3)  (minMinute ?minMinute3)  (minSecond ?minSecond3) 
                  (maxHour ?maxHour1)  (maxMinute ?maxMinute1)  (maxSecond ?maxSecond1) (id_weekday ?id_weekday2)))
)

(defrule create-general-freeTime-threePerson-7-negative
  (three-person)
  (useFreeTime  (id_person ?person_id1) (minDate ?minDate1) (maxDate ?maxDate1) 
                (minHour ?minHour1)  (minMinute ?minMinute1)  (minSecond ?minSecond1) 
                (maxHour ?maxHour1)  (maxMinute ?maxMinute1)  (maxSecond ?maxSecond1) (id_weekday ?id_weekday1))
  (useFreeTime  (id_person ?person_id2) (minDate ?minDate2) (maxDate ?maxDate2) 
                (minHour ?minHour2)  (minMinute ?minMinute2)  (minSecond ?minSecond2) 
                (maxHour ?maxHour2)  (maxMinute ?maxMinute2)  (maxSecond ?maxSecond2) (id_weekday ?id_weekday2))   
  (useFreeTime  (id_person ?person_id3) (minDate ?minDate3) (maxDate ?maxDate3) 
                (minHour ?minHour3)  (minMinute ?minMinute3)  (minSecond ?minSecond3) 
                (maxHour ?maxHour3)  (maxMinute ?maxMinute3)  (maxSecond ?maxSecond3) (id_weekday ?id_weekday3))              
  (event (name ?event_name) (hour ?event_hour)  (minute ?event_minute) (second ?event_second))
  (eventRequest (name ?eventRequest_name))
  (test (and(<> ?person_id1 ?person_id2)
            (<> ?person_id2 ?person_id3)
            (<> ?person_id3 ?person_id1)
            (eq ?event_name ?eventRequest_name)

            (not  (and  (>= ?minHour1 ?minHour2)
                        (>= ?minHour1 ?minHour3)))

            (not  (and  (>= ?minHour2 ?minHour1)
                        (>= ?minHour2 ?minHour3)))

            (>= ?minHour3 ?minHour1)
            (>= ?minHour3 ?minHour2)
            
            (<= ?maxHour1 ?maxHour2)
            (<= ?maxHour1 ?maxHour3)
            
            (not (>=  (-  (+  (+ (* ?maxHour1 3600) (* ?maxMinute1 60)) 
                            ?maxSecond1)
                          (+  (+ (* ?minHour3 3600) (* ?minMinute3 60)) 
                              ?minSecond3))
                      (+  (+ (* ?event_hour 3600) (* ?event_minute 60)) 
                          ?event_second)))
            ))
  =>
  (assert (answer (text "В этот день не получится")))
)

(defrule create-general-freeTime-threePerson-8
  (three-person)
  (useFreeTime  (id_person ?person_id1) (minDate ?minDate1) (maxDate ?maxDate1) 
                (minHour ?minHour1)  (minMinute ?minMinute1)  (minSecond ?minSecond1) 
                (maxHour ?maxHour1)  (maxMinute ?maxMinute1)  (maxSecond ?maxSecond1) (id_weekday ?id_weekday1))
  (useFreeTime  (id_person ?person_id2) (minDate ?minDate2) (maxDate ?maxDate2) 
                (minHour ?minHour2)  (minMinute ?minMinute2)  (minSecond ?minSecond2) 
                (maxHour ?maxHour2)  (maxMinute ?maxMinute2)  (maxSecond ?maxSecond2) (id_weekday ?id_weekday2))   
  (useFreeTime  (id_person ?person_id3) (minDate ?minDate3) (maxDate ?maxDate3) 
                (minHour ?minHour3)  (minMinute ?minMinute3)  (minSecond ?minSecond3) 
                (maxHour ?maxHour3)  (maxMinute ?maxMinute3)  (maxSecond ?maxSecond3) (id_weekday ?id_weekday3))              
  (event (name ?event_name) (hour ?event_hour)  (minute ?event_minute) (second ?event_second))
  (eventRequest (name ?eventRequest_name))
  (test (and(<> ?person_id1 ?person_id2)
            (<> ?person_id2 ?person_id3)
            (<> ?person_id3 ?person_id1)
            (eq ?event_name ?eventRequest_name)

            (not  (and  (>= ?minHour1 ?minHour2)
                        (>= ?minHour1 ?minHour3)))

            (not  (and  (>= ?minHour2 ?minHour1)
                        (>= ?minHour2 ?minHour3)))

            (>= ?minHour3 ?minHour1)
            (>= ?minHour3 ?minHour2)

            (not  (and  (<= ?maxHour1 ?maxHour2)
                        (<= ?maxHour1 ?maxHour3)))
            
            (<= ?maxHour2 ?maxHour1)
            (<= ?maxHour2 ?maxHour3)
            
            (>=  (-  (+  (+ (* ?maxHour2 3600) (* ?maxMinute2 60)) 
                            ?maxSecond2)
                          (+  (+ (* ?minHour3 3600) (* ?minMinute3 60)) 
                              ?minSecond3))
                      (+  (+ (* ?event_hour 3600) (* ?event_minute 60)) 
                          ?event_second))
            ))
  =>
  then (assert (generalFreeTime (minDate ?minDate1) (maxDate ?maxDate1) 
                    (minHour ?minHour3)  (minMinute ?minMinute3)  (minSecond ?minSecond3) 
                    (maxHour ?maxHour2)  (maxMinute ?maxMinute2)  (maxSecond ?maxSecond2) (id_weekday ?id_weekday2)))
)

(defrule create-general-freeTime-threePerson-8-negative
  (three-person)
  (useFreeTime  (id_person ?person_id1) (minDate ?minDate1) (maxDate ?maxDate1) 
                (minHour ?minHour1)  (minMinute ?minMinute1)  (minSecond ?minSecond1) 
                (maxHour ?maxHour1)  (maxMinute ?maxMinute1)  (maxSecond ?maxSecond1) (id_weekday ?id_weekday1))
  (useFreeTime  (id_person ?person_id2) (minDate ?minDate2) (maxDate ?maxDate2) 
                (minHour ?minHour2)  (minMinute ?minMinute2)  (minSecond ?minSecond2) 
                (maxHour ?maxHour2)  (maxMinute ?maxMinute2)  (maxSecond ?maxSecond2) (id_weekday ?id_weekday2))   
  (useFreeTime  (id_person ?person_id3) (minDate ?minDate3) (maxDate ?maxDate3) 
                (minHour ?minHour3)  (minMinute ?minMinute3)  (minSecond ?minSecond3) 
                (maxHour ?maxHour3)  (maxMinute ?maxMinute3)  (maxSecond ?maxSecond3) (id_weekday ?id_weekday3))              
  (event (name ?event_name) (hour ?event_hour)  (minute ?event_minute) (second ?event_second))
  (eventRequest (name ?eventRequest_name))
  (test (and(<> ?person_id1 ?person_id2)
            (<> ?person_id2 ?person_id3)
            (<> ?person_id3 ?person_id1)
            (eq ?event_name ?eventRequest_name)

            (not  (and  (>= ?minHour1 ?minHour2)
                        (>= ?minHour1 ?minHour3)))

            (not  (and  (>= ?minHour2 ?minHour1)
                        (>= ?minHour2 ?minHour3)))

            (>= ?minHour3 ?minHour1)
            (>= ?minHour3 ?minHour2)

            (not  (and  (<= ?maxHour1 ?maxHour2)
                        (<= ?maxHour1 ?maxHour3)))
            
            (<= ?maxHour2 ?maxHour1)
            (<= ?maxHour2 ?maxHour3)
            
            (not (>=  (-  (+  (+ (* ?maxHour2 3600) (* ?maxMinute2 60)) 
                            ?maxSecond2)
                          (+  (+ (* ?minHour3 3600) (* ?minMinute3 60)) 
                              ?minSecond3))
                      (+  (+ (* ?event_hour 3600) (* ?event_minute 60)) 
                          ?event_second)))
            ))
  =>
  (assert (answer (text "В этот день не получится")))
)

(defrule create-general-freeTime-threePerson-9
  (three-person)
  (useFreeTime  (id_person ?person_id1) (minDate ?minDate1) (maxDate ?maxDate1) 
                (minHour ?minHour1)  (minMinute ?minMinute1)  (minSecond ?minSecond1) 
                (maxHour ?maxHour1)  (maxMinute ?maxMinute1)  (maxSecond ?maxSecond1) (id_weekday ?id_weekday1))
  (useFreeTime  (id_person ?person_id2) (minDate ?minDate2) (maxDate ?maxDate2) 
                (minHour ?minHour2)  (minMinute ?minMinute2)  (minSecond ?minSecond2) 
                (maxHour ?maxHour2)  (maxMinute ?maxMinute2)  (maxSecond ?maxSecond2) (id_weekday ?id_weekday2))   
  (useFreeTime  (id_person ?person_id3) (minDate ?minDate3) (maxDate ?maxDate3) 
                (minHour ?minHour3)  (minMinute ?minMinute3)  (minSecond ?minSecond3) 
                (maxHour ?maxHour3)  (maxMinute ?maxMinute3)  (maxSecond ?maxSecond3) (id_weekday ?id_weekday3))              
  (event (name ?event_name) (hour ?event_hour)  (minute ?event_minute) (second ?event_second))
  (eventRequest (name ?eventRequest_name))
  (test (and(<> ?person_id1 ?person_id2)
            (<> ?person_id2 ?person_id3)
            (<> ?person_id3 ?person_id1)
            (eq ?event_name ?eventRequest_name)

            (not  (and  (>= ?minHour1 ?minHour2)
                        (>= ?minHour1 ?minHour3)))

            (not  (and  (>= ?minHour2 ?minHour1)
                        (>= ?minHour2 ?minHour3)))

            (>= ?minHour3 ?minHour1)
            (>= ?minHour3 ?minHour2)

            (not  (and  (<= ?maxHour1 ?maxHour2)
                        (<= ?maxHour1 ?maxHour3)))

            (not  (and  (<= ?maxHour2 ?maxHour1)
                        (<= ?maxHour2 ?maxHour3)))
            
            (<= ?maxHour3 ?maxHour1)
            (<= ?maxHour3 ?maxHour2)
            
            (>=  (-  (+  (+ (* ?maxHour3 3600) (* ?maxMinute3 60)) 
                            ?maxSecond3)
                          (+  (+ (* ?minHour3 3600) (* ?minMinute3 60)) 
                              ?minSecond3))
                      (+  (+ (* ?event_hour 3600) (* ?event_minute 60)) 
                          ?event_second))
            ))
  =>
  then (assert (generalFreeTime (minDate ?minDate1) (maxDate ?maxDate1) 
                    (minHour ?minHour3)  (minMinute ?minMinute3)  (minSecond ?minSecond3) 
                    (maxHour ?maxHour3)  (maxMinute ?maxMinute3)  (maxSecond ?maxSecond3) (id_weekday ?id_weekday2)))
)

(defrule create-general-freeTime-threePerson-9-negative
  (three-person)
  (useFreeTime  (id_person ?person_id1) (minDate ?minDate1) (maxDate ?maxDate1) 
                (minHour ?minHour1)  (minMinute ?minMinute1)  (minSecond ?minSecond1) 
                (maxHour ?maxHour1)  (maxMinute ?maxMinute1)  (maxSecond ?maxSecond1) (id_weekday ?id_weekday1))
  (useFreeTime  (id_person ?person_id2) (minDate ?minDate2) (maxDate ?maxDate2) 
                (minHour ?minHour2)  (minMinute ?minMinute2)  (minSecond ?minSecond2) 
                (maxHour ?maxHour2)  (maxMinute ?maxMinute2)  (maxSecond ?maxSecond2) (id_weekday ?id_weekday2))   
  (useFreeTime  (id_person ?person_id3) (minDate ?minDate3) (maxDate ?maxDate3) 
                (minHour ?minHour3)  (minMinute ?minMinute3)  (minSecond ?minSecond3) 
                (maxHour ?maxHour3)  (maxMinute ?maxMinute3)  (maxSecond ?maxSecond3) (id_weekday ?id_weekday3))              
  (event (name ?event_name) (hour ?event_hour)  (minute ?event_minute) (second ?event_second))
  (eventRequest (name ?eventRequest_name))
  (test (and(<> ?person_id1 ?person_id2)
            (<> ?person_id2 ?person_id3)
            (<> ?person_id3 ?person_id1)
            (eq ?event_name ?eventRequest_name)

            (not  (and  (>= ?minHour1 ?minHour2)
                        (>= ?minHour1 ?minHour3)))

            (not  (and  (>= ?minHour2 ?minHour1)
                        (>= ?minHour2 ?minHour3)))

            (>= ?minHour3 ?minHour1)
            (>= ?minHour3 ?minHour2)

            (not  (and  (<= ?maxHour1 ?maxHour2)
                        (<= ?maxHour1 ?maxHour3)))

            (not  (and  (<= ?maxHour2 ?maxHour1)
                        (<= ?maxHour2 ?maxHour3)))
            
            (<= ?maxHour3 ?maxHour1)
            (<= ?maxHour3 ?maxHour2)
            
            (not (>=  (-  (+  (+ (* ?maxHour3 3600) (* ?maxMinute3 60)) 
                            ?maxSecond3)
                          (+  (+ (* ?minHour3 3600) (* ?minMinute3 60)) 
                              ?minSecond3))
                      (+  (+ (* ?event_hour 3600) (* ?event_minute 60)) 
                          ?event_second)))
            ))
  =>
  (assert (answer (text "В этот день не получится")))
)

(defrule create-answer-001
  (generalFreeTime (minDate ?minDate) (maxDate ?maxDate) 
            (minHour ?minHour)  (minMinute ?minMinute)  (minSecond ?minSecond) 
            (maxHour ?maxHour)  (maxMinute ?maxMinute)  (maxSecond ?maxSecond) (id_weekday ?id_weekday))
  (eventRequest (group_name ?eventRequest_group_name) (date ?eventRequest_date) (name ?eventRequest_name))
  (weekday (id ?id) (name ?weekday_name))
  (test (and  (= ?id ?id_weekday)

              (eq ?eventRequest_group_name "я")
          ))
  =>
  (assert (answer1 (text "Ты можешь сходить " )))
)

(defrule create-answer-002
  (generalFreeTime (minDate ?minDate) (maxDate ?maxDate) 
            (minHour ?minHour)  (minMinute ?minMinute)  (minSecond ?minSecond) 
            (maxHour ?maxHour)  (maxMinute ?maxMinute)  (maxSecond ?maxSecond) (id_weekday ?id_weekday))
  (eventRequest (group_name ?eventRequest_group_name) (date ?eventRequest_date) (name ?eventRequest_name))
  (weekday (id ?id) (name ?weekday_name))
  (test (and  (= ?id ?id_weekday)

              (neq ?eventRequest_group_name "я")
          ))
  =>
  (assert (answer1 (text "Вы можете сходить " )))
)

(defrule create-answer-010
  (generalFreeTime (minDate ?minDate) (maxDate ?maxDate) 
            (minHour ?minHour)  (minMinute ?minMinute)  (minSecond ?minSecond) 
            (maxHour ?maxHour)  (maxMinute ?maxMinute)  (maxSecond ?maxSecond) (id_weekday ?id_weekday))
  (eventRequest (group_name ?eventRequest_group_name) (date ?eventRequest_date) (name ?eventRequest_name))
  (weekday (id ?id) (name ?weekday_name))
  (test (and  (= ?id ?id_weekday)

              (eq ?eventRequest_name "кино")
          ))
  =>
  (assert (answer3 (text  "в кино ")))
)

(defrule create-answer-020
  (generalFreeTime (minDate ?minDate) (maxDate ?maxDate) 
            (minHour ?minHour)  (minMinute ?minMinute)  (minSecond ?minSecond) 
            (maxHour ?maxHour)  (maxMinute ?maxMinute)  (maxSecond ?maxSecond) (id_weekday ?id_weekday))
  (eventRequest (group_name ?eventRequest_group_name) (date ?eventRequest_date) (name ?eventRequest_name))
  (weekday (id ?id) (name ?weekday_name))
  (test (and  (= ?id ?id_weekday)

              (eq ?eventRequest_name "бар")
          ))
  =>
  (assert (answer3 (text  "в бар ")))
)

(defrule create-answer-030
  (generalFreeTime (minDate ?minDate) (maxDate ?maxDate) 
            (minHour ?minHour)  (minMinute ?minMinute)  (minSecond ?minSecond) 
            (maxHour ?maxHour)  (maxMinute ?maxMinute)  (maxSecond ?maxSecond) (id_weekday ?id_weekday))
  (eventRequest (group_name ?eventRequest_group_name) (date ?eventRequest_date) (name ?eventRequest_name))
  (weekday (id ?id) (name ?weekday_name))
  (test (and  (= ?id ?id_weekday)

              (eq ?eventRequest_name "матч")
          ))
  =>
  (assert (answer3 (text  "на матч ")))
)

(defrule create-answer-040
  (generalFreeTime (minDate ?minDate) (maxDate ?maxDate) 
            (minHour ?minHour)  (minMinute ?minMinute)  (minSecond ?minSecond) 
            (maxHour ?maxHour)  (maxMinute ?maxMinute)  (maxSecond ?maxSecond) (id_weekday ?id_weekday))
  (eventRequest (group_name ?eventRequest_group_name) (date ?eventRequest_date) (name ?eventRequest_name))
  (weekday (id ?id) (name ?weekday_name))
  (test (and  (= ?id ?id_weekday)

              (eq ?eventRequest_name "поход")
          ))
  =>
  (assert (answer3 (text  "в поход ")))
)

(defrule create-answer-100
  (generalFreeTime (minDate ?minDate) (maxDate ?maxDate) 
            (minHour ?minHour)  (minMinute ?minMinute)  (minSecond ?minSecond) 
            (maxHour ?maxHour)  (maxMinute ?maxMinute)  (maxSecond ?maxSecond) (id_weekday ?id_weekday))
  (eventRequest (group_name ?eventRequest_group_name) (date ?eventRequest_date) (name ?eventRequest_name))
  (weekday (id ?id) (name ?weekday_name))
  (test (and  (= ?id ?id_weekday)

              (eq ?weekday_name "понедельник")
          ))
  =>
  (assert (answer2 (text "в понедельник ")))
)

(defrule create-answer-200
  (generalFreeTime (minDate ?minDate) (maxDate ?maxDate) 
            (minHour ?minHour)  (minMinute ?minMinute)  (minSecond ?minSecond) 
            (maxHour ?maxHour)  (maxMinute ?maxMinute)  (maxSecond ?maxSecond) (id_weekday ?id_weekday))
  (eventRequest (group_name ?eventRequest_group_name) (date ?eventRequest_date) (name ?eventRequest_name))
  (weekday (id ?id) (name ?weekday_name))
  (test (and  (= ?id ?id_weekday)

              (eq ?weekday_name "вторник")
          ))
  =>
  (assert (answer2 (text "во вторник ")))
)

(defrule create-answer-300
  (generalFreeTime (minDate ?minDate) (maxDate ?maxDate) 
            (minHour ?minHour)  (minMinute ?minMinute)  (minSecond ?minSecond) 
            (maxHour ?maxHour)  (maxMinute ?maxMinute)  (maxSecond ?maxSecond) (id_weekday ?id_weekday))
  (eventRequest (group_name ?eventRequest_group_name) (date ?eventRequest_date) (name ?eventRequest_name))
  (weekday (id ?id) (name ?weekday_name))
  (test (and  (= ?id ?id_weekday)

              (eq ?weekday_name "среда")
          ))
  =>
  (assert (answer2 (text "в среду ")))
)

(defrule create-answer-400
  (generalFreeTime (minDate ?minDate) (maxDate ?maxDate) 
            (minHour ?minHour)  (minMinute ?minMinute)  (minSecond ?minSecond) 
            (maxHour ?maxHour)  (maxMinute ?maxMinute)  (maxSecond ?maxSecond) (id_weekday ?id_weekday))
  (eventRequest (group_name ?eventRequest_group_name) (date ?eventRequest_date) (name ?eventRequest_name))
  (weekday (id ?id) (name ?weekday_name))
  (test (and  (= ?id ?id_weekday)

              (eq ?weekday_name "четверг")
          ))
  =>
  (assert (answer2 (text "в четверг ")))
)

(defrule create-answer-500
  (generalFreeTime (minDate ?minDate) (maxDate ?maxDate) 
            (minHour ?minHour)  (minMinute ?minMinute)  (minSecond ?minSecond) 
            (maxHour ?maxHour)  (maxMinute ?maxMinute)  (maxSecond ?maxSecond) (id_weekday ?id_weekday))
  (eventRequest (group_name ?eventRequest_group_name) (date ?eventRequest_date) (name ?eventRequest_name))
  (weekday (id ?id) (name ?weekday_name))
  (test (and  (= ?id ?id_weekday)

              (eq ?weekday_name "пятница")
          ))
  =>
  (assert (answer2 (text "в пятницу ")))
)

(defrule create-answer-600
  (generalFreeTime (minDate ?minDate) (maxDate ?maxDate) 
            (minHour ?minHour)  (minMinute ?minMinute)  (minSecond ?minSecond) 
            (maxHour ?maxHour)  (maxMinute ?maxMinute)  (maxSecond ?maxSecond) (id_weekday ?id_weekday))
  (eventRequest (group_name ?eventRequest_group_name) (date ?eventRequest_date) (name ?eventRequest_name))
  (weekday (id ?id) (name ?weekday_name))
  (test (and  (= ?id ?id_weekday)

              (eq ?weekday_name "суббота")
          ))
  =>
  (assert (answer2 (text "в субботу ")))
)

(defrule create-answer-700
  (generalFreeTime (minDate ?minDate) (maxDate ?maxDate) 
            (minHour ?minHour)  (minMinute ?minMinute)  (minSecond ?minSecond) 
            (maxHour ?maxHour)  (maxMinute ?maxMinute)  (maxSecond ?maxSecond) (id_weekday ?id_weekday))
  (eventRequest (group_name ?eventRequest_group_name) (date ?eventRequest_date) (name ?eventRequest_name))
  (weekday (id ?id) (name ?weekday_name))
  (test (and  (= ?id ?id_weekday)

              (eq ?weekday_name "воскресенье")
          ))
  =>
  (assert (answer2 (text "в воскресенье ")))
)

(defrule create-answer
  (answer1 (text ?text1))
  (answer2 (text ?text2))
  (answer3 (text ?text3))
  (generalFreeTime (minDate ?minDate) (maxDate ?maxDate) 
            (minHour ?minHour)  (minMinute ?minMinute)  (minSecond ?minSecond) 
            (maxHour ?maxHour)  (maxMinute ?maxMinute)  (maxSecond ?maxSecond) (id_weekday ?id_weekday))
  (eventRequest (group_name ?eventRequest_group_name) (date ?eventRequest_date) (name ?eventRequest_name))
  (weekday (id ?id) (name ?weekday_name))
  (test (= ?id ?id_weekday))
  =>
  (assert (answer (text (str-cat ?text1 ?text2 ?text3 "c " (timeString ?minHour) ":" (timeString ?minMinute) " до " (timeString ?maxHour) ":" (timeString ?maxMinute)))))
)



(defrule ShowResults

	(answer (text ?x))

=>

	(printout t ?x)
  (undefrule   check-answer)

)