/******************************************************************************/
/*            Generated by IBExpert 2022.3.8.1 16.05.2022 0:20:14             */
/******************************************************************************/

SET SQL DIALECT 3;

SET NAMES WIN1251;

CREATE DATABASE 'LOCALHOST:C:\Users\admin\Desktop\Новая папка\Torgovaya.fdb'
USER 'SYSDBA' PASSWORD 'masterkey'
PAGE_SIZE 16384
DEFAULT CHARACTER SET WIN1251;



/******************************************************************************/
/*                                 Generators                                 */
/******************************************************************************/

CREATE GENERATOR GEN_SKLAD_ID;
SET GENERATOR GEN_SKLAD_ID TO 5;

CREATE GENERATOR GEN_TOVAR_ID;
SET GENERATOR GEN_TOVAR_ID TO 12;



/******************************************************************************/
/*                                 Exceptions                                 */
/******************************************************************************/

CREATE EXCEPTION EX_SKLAD_EXISTS 'Такой склад уже существует.';

CREATE EXCEPTION EX_SKLAD_NOT_NULL 'Нельзя удалить.';

CREATE EXCEPTION EX_TOVAR_EXISTS 'Такой товар уже существует.';

CREATE EXCEPTION EX_TOVAR_NOT_NULL 'Нельзя удалить.';

CREATE EXCEPTION EX_TT_EXISTS 'Такая тт уже существует.';

CREATE EXCEPTION EX_TT_NOT_NULL 'Нельзя удалить.';



/******************************************************************************/
/*                             Stored procedures                              */
/******************************************************************************/



SET TERM ^ ;

CREATE PROCEDURE DEL_SKLAD (
    PID_NUMBER_SKLADA INTEGER)
AS
BEGIN
  EXIT;
END^





CREATE PROCEDURE DEL_TOVAR (
    PID_NUMBER_TOVARA INTEGER)
AS
BEGIN
  EXIT;
END^





CREATE PROCEDURE DEL_TT (
    PNAME_TT INTEGER)
AS
BEGIN
  EXIT;
END^





CREATE PROCEDURE INS_SKLAD (
    PID_NUMBER_SKLADA INTEGER,
    PINDEKS_ADRESA INTEGER,
    PGOROD_ADRESA VARCHAR(30),
    PULITSA_ADRESA VARCHAR(30),
    PHOUSE_AGRESA INTEGER,
    PFAMILIA_KL VARCHAR(30),
    PNAME_KL VARCHAR(30),
    POTCHESTVO_KL VARCHAR(30))
AS
BEGIN
  EXIT;
END^





CREATE PROCEDURE INS_TOVAR (
    PID_NUMBER_TOVARA INTEGER,
    PNAME_TOVARA VARCHAR(30),
    PEDINITSA_IZMERENIYA_TOVARA VARCHAR(5),
    PKOLICHESTVO INTEGER,
    PTSENA INTEGER)
AS
BEGIN
  EXIT;
END^





CREATE PROCEDURE INS_TT (
    PNAME_TT VARCHAR(30),
    PINDEKS_TT INTEGER,
    PGOROD_TT VARCHAR(30),
    PULITSA_TT VARCHAR(30),
    PHOUSE_TT INTEGER)
AS
BEGIN
  EXIT;
END^





CREATE PROCEDURE SPISOK1 (
    PID_NUMBER_SKLADA INTEGER,
    PNAME_TOVARA INTEGER,
    PSTOIMOST INTEGER)
AS
BEGIN
  EXIT;
END^





CREATE PROCEDURE UPD_SKLAD (
    PID_NUMBER_SKLADA INTEGER,
    PINDEKS_ADRESA INTEGER,
    PGOROD_ADRESA VARCHAR(30),
    PULITSA_ADRESA VARCHAR(30),
    PHOUSE_AGRESA INTEGER,
    PFAMILIA_KL VARCHAR(30),
    PNAME_KL VARCHAR(30),
    POTCHESTVO_KL VARCHAR(30))
AS
BEGIN
  EXIT;
END^





CREATE PROCEDURE UPD_TOVAR (
    PID_NUMBER_TOVARA INTEGER,
    PNAME_TOVARA VARCHAR(30),
    PEDINITSA_IZMERENIYA_TOVARA VARCHAR(5),
    PKOLICHESTVO INTEGER,
    PTSENA INTEGER)
AS
BEGIN
  EXIT;
END^





CREATE PROCEDURE UPD_TT (
    PNAME_TT VARCHAR(30),
    PINDEKS_TT INTEGER,
    PGOROD_TT VARCHAR(30),
    PULITSA_TT VARCHAR(30),
    PHOUSE_TT INTEGER)
AS
BEGIN
  EXIT;
END^






SET TERM ; ^



/******************************************************************************/
/*                                   Tables                                   */
/******************************************************************************/



CREATE TABLE SKLAD (
    ID_NUMBER_SKLADA  INTEGER NOT NULL,
    INDEKS_ADRESA     INTEGER NOT NULL,
    GOROD_ADRESA      VARCHAR(30) NOT NULL,
    ULITSA_ADRESA     VARCHAR(30) NOT NULL,
    HOUSE_AGRESA      INTEGER NOT NULL,
    FAMILIA_KL        VARCHAR(30) NOT NULL,
    NAME_KL           VARCHAR(30) NOT NULL,
    OTCHESTVO_KL      VARCHAR(30) NOT NULL
);

CREATE TABLE TORGOVAYA_TOCHKA (
    NAME_TT    VARCHAR(30) NOT NULL,
    INDEKS_TT  INTEGER NOT NULL,
    GOROD_TT   VARCHAR(30) NOT NULL,
    ULITSA_TT  VARCHAR(30) NOT NULL,
    HOUSE_TT   INTEGER NOT NULL
);

CREATE TABLE TOVAR (
    ID_NUMBER_TOVARA            INTEGER NOT NULL,
    NAME_TOVARA                 VARCHAR(30) NOT NULL,
    EDINITSA_IZMERENIYA_TOVARA  VARCHAR(5) NOT NULL,
    KOLICHESTVO                 INTEGER NOT NULL,
    TSENA                       INTEGER NOT NULL,
    STOIMOST                    COMPUTED BY (KOLICHESTVO*TSENA)
);

CREATE TABLE TOVAR_SKLADE (
    ID_NUMBER_TOVARA  INTEGER NOT NULL,
    ID_NUMBER_SKLADA  INTEGER NOT NULL,
    KOLICHESTVO       INTEGER NOT NULL,
    TSENA             INTEGER NOT NULL,
    STOIMOST          COMPUTED BY (KOLICHESTVO*TSENA)
);

CREATE TABLE TOVAR_TT (
    ID_NUMBER_TOVARA  INTEGER NOT NULL,
    NAME_TT           VARCHAR(30) NOT NULL,
    KOLICHESTVO       INTEGER NOT NULL,
    TSENA             INTEGER NOT NULL
);



/******************************************************************************/
/*                                   Views                                    */
/******************************************************************************/


/* View: SPISOK_TOVAROV_NA_SKLADE */
CREATE VIEW SPISOK_TOVAROV_NA_SKLADE(
    ID_NUMBER_SKLADA,
    NAME_TOVARA,
    STOIMOST)
AS
select TS.id_number_sklada, T.name_tovara, TS.stoimost
from tovar T, SKLAD S, tovar_sklade TS
where S.id_number_sklada=TS.id_number_sklada AND T.id_number_tovara=TS.id_number_tovara
;



/* View: TT_S_KOLICH_TOVAROV */
CREATE VIEW TT_S_KOLICH_TOVAROV(
    NAME_TT,
    KOLICHESTVO)
AS
select TTT.name_tt, TTT.kolichestvo
from TOVAR T, tovar_tt TTT, torgovaya_tochka TT
where T.id_number_tovara=TTT.id_number_tovara AND TT.name_tt=TTT.name_tt
;




/******************************************************************************/
/*                                Primary keys                                */
/******************************************************************************/

ALTER TABLE SKLAD ADD CONSTRAINT PK_SKLAD PRIMARY KEY (ID_NUMBER_SKLADA);
ALTER TABLE TORGOVAYA_TOCHKA ADD CONSTRAINT PK_TORGOVAYA_TOCHKA PRIMARY KEY (NAME_TT);
ALTER TABLE TOVAR ADD CONSTRAINT PK_TOVAR PRIMARY KEY (ID_NUMBER_TOVARA);
ALTER TABLE TOVAR_SKLADE ADD CONSTRAINT PK_TOVAR_SKLADE PRIMARY KEY (ID_NUMBER_TOVARA, ID_NUMBER_SKLADA);
ALTER TABLE TOVAR_TT ADD CONSTRAINT PK_TOVAR_TT PRIMARY KEY (ID_NUMBER_TOVARA, NAME_TT);


/******************************************************************************/
/*                                Foreign keys                                */
/******************************************************************************/

ALTER TABLE TOVAR_SKLADE ADD CONSTRAINT FK_TOVAR_SKLADE_1 FOREIGN KEY (ID_NUMBER_TOVARA) REFERENCES TOVAR (ID_NUMBER_TOVARA);
ALTER TABLE TOVAR_SKLADE ADD CONSTRAINT FK_TOVAR_SKLADE_2 FOREIGN KEY (ID_NUMBER_SKLADA) REFERENCES SKLAD (ID_NUMBER_SKLADA);
ALTER TABLE TOVAR_TT ADD CONSTRAINT FK_TOVAR_TT_1 FOREIGN KEY (ID_NUMBER_TOVARA) REFERENCES TOVAR (ID_NUMBER_TOVARA);
ALTER TABLE TOVAR_TT ADD CONSTRAINT FK_TOVAR_TT_2 FOREIGN KEY (NAME_TT) REFERENCES TORGOVAYA_TOCHKA (NAME_TT);


/******************************************************************************/
/*                                  Triggers                                  */
/******************************************************************************/



SET TERM ^ ;



/******************************************************************************/
/*                            Triggers for tables                             */
/******************************************************************************/



/* Trigger: SKLAD_BI */
CREATE TRIGGER SKLAD_BI FOR SKLAD
ACTIVE BEFORE INSERT POSITION 0
as
begin
  if (new.id_number_sklada is null) then
    new.id_number_sklada = gen_id(gen_sklad_id,1);
end
^

/* Trigger: TOVAR_BI */
CREATE TRIGGER TOVAR_BI FOR TOVAR
ACTIVE BEFORE INSERT POSITION 0
as
begin
  if (new.id_number_tovara is null) then
    new.id_number_tovara = gen_id(gen_tovar_id,1);
end
^
SET TERM ; ^



/******************************************************************************/
/*                             Stored procedures                              */
/******************************************************************************/



SET TERM ^ ;

ALTER PROCEDURE DEL_SKLAD (
    PID_NUMBER_SKLADA INTEGER)
AS
declare variable k integer;
begin
  SELECT count(*) FROM SKLAD
  where ID_NUMBER_SKLADA=:pid_number_sklada
  into :K;
  if (:K=0) then
  DELETE FROM SKLAD WHERE ID_NUMBER_SKLADA=:pid_number_sklada;
  ELSE exception ex_SKLAD_not_null;
  suspend;
end^


ALTER PROCEDURE DEL_TOVAR (
    PID_NUMBER_TOVARA INTEGER)
AS
declare variable k integer;
begin
  SELECT count(*) FROM TOVAR
  where ID_NUMBER_TOVARA=:pid_number_tovara
  into :K;
  if (:K=0) then
  DELETE FROM TOVAR WHERE ID_NUMBER_TOVARA=:pid_number_tovara;
  ELSE exception ex_tovar_not_null;
  suspend;
end^


ALTER PROCEDURE DEL_TT (
    PNAME_TT INTEGER)
AS
declare variable k integer;
begin
  SELECT count(*) FROM TORGOVAYA_TOCHKA
  where NAME_TT =:pname_tt
  into :K;
  if (:K=0) then
  DELETE FROM TORGOVAYA_TOCHKA WHERE NAME_TT=:pname_tt;
  ELSE exception ex_tt_not_null;
  suspend;
end^


ALTER PROCEDURE INS_SKLAD (
    PID_NUMBER_SKLADA INTEGER,
    PINDEKS_ADRESA INTEGER,
    PGOROD_ADRESA VARCHAR(30),
    PULITSA_ADRESA VARCHAR(30),
    PHOUSE_AGRESA INTEGER,
    PFAMILIA_KL VARCHAR(30),
    PNAME_KL VARCHAR(30),
    POTCHESTVO_KL VARCHAR(30))
AS
declare variable K INTEGER;
begin
  SELECT count(*) FROM SKLAD
  where INDEKS_ADRESA=:pindeks_adresa AND GOROD_ADRESA=:pgorod_adresa AND ULITSA_ADRESA=:pulitsa_adresa AND HOUSE_AGRESA=:phouse_agresa and FAMILIA_KL=:pfamilia_kl and NAME_KL=:pname_kl and OTCHESTVO_KL=:potchestvo_kl
  into :K;
  if (:K=0) then
  insert INTO SKLAD (ID_NUMBER_SKLADA, INDEKS_ADRESA, GOROD_ADRESA, ULITSA_ADRESA, HOUSE_AGRESA, FAMILIA_KL, NAME_KL, OTCHESTVO_KL)
  values (:PID_NUMBER_SKLADA, :PINDEKS_ADRESA, :PGOROD_ADRESA, :PULITSA_ADRESA, :PHOUSE_AGRESA, :PFAMILIA_KL, :PNAME_KL, :POTCHESTVO_KL);
  else exception ex_sklad_exists;
  suspend;
end^


ALTER PROCEDURE INS_TOVAR (
    PID_NUMBER_TOVARA INTEGER,
    PNAME_TOVARA VARCHAR(30),
    PEDINITSA_IZMERENIYA_TOVARA VARCHAR(5),
    PKOLICHESTVO INTEGER,
    PTSENA INTEGER)
AS
declare variable K INTEGER;
begin
  SELECT count(*) FROM TOVAR
  where NAME_TOVARA=:pname_tovara AND EDINITSA_IZMERENIYA_TOVARA=:pedinitsa_izmereniya_tovara AND KOLICHESTVO=:pkolichestvo AND TSENA=:ptsena
  into :K;
  if (:K=0) then
  insert INTO TOVAR (ID_NUMBER_TOVARA, NAME_TOVARA, EDINITSA_IZMERENIYA_TOVARA, KOLICHESTVO, TSENA)
  values (:PID_NUMBER_TOVARA, :PNAME_TOVARA, :PEDINITSA_IZMERENIYA_TOVARA, :PKOLICHESTVO, :PTSENA);
  else exception EX_TOVAR_EXISTS;
  suspend;
end^


ALTER PROCEDURE INS_TT (
    PNAME_TT VARCHAR(30),
    PINDEKS_TT INTEGER,
    PGOROD_TT VARCHAR(30),
    PULITSA_TT VARCHAR(30),
    PHOUSE_TT INTEGER)
AS
declare variable K INTEGER;
begin
  SELECT count(*) FROM TORGOVAYA_TOCHKA
  where INDEKS_TT=:pindeks_tt AND GOROD_TT=:pgorod_tt AND ULITSA_TT=:pulitsa_tt AND HOUSE_TT=:phouse_tt
  into :K;
  if (:K=0) then
  insert INTO TORGOVAYA_TOCHKA (NAME_TT, INDEKS_TT, GOROD_TT, ULITSA_TT, HOUSE_TT)
  values (:PNAME_TT, :PINDEKS_TT, :PGOROD_TT, :PULITSA_TT, :PHOUSE_TT);
  else exception ex_tt_exists;
  suspend;
end^


ALTER PROCEDURE SPISOK1 (
    PID_NUMBER_SKLADA INTEGER,
    PNAME_TOVARA INTEGER,
    PSTOIMOST INTEGER)
AS
declare variable N INTEGER;
begin
    SELECT count(*) FROM TOVAR
    where NAME_TOVARA=:pname_tovara into N;
  suspend;
end^


ALTER PROCEDURE UPD_SKLAD (
    PID_NUMBER_SKLADA INTEGER,
    PINDEKS_ADRESA INTEGER,
    PGOROD_ADRESA VARCHAR(30),
    PULITSA_ADRESA VARCHAR(30),
    PHOUSE_AGRESA INTEGER,
    PFAMILIA_KL VARCHAR(30),
    PNAME_KL VARCHAR(30),
    POTCHESTVO_KL VARCHAR(30))
AS
declare variable k integer;
begin
  UPDATE SKLAD
  SET INDEKS_ADRESA=:pindeks_adresa,
      GOROD_ADRESA=:pgorod_adresa,
      ULITSA_ADRESA=:pulitsa_adresa,
      HOUSE_AGRESA=:phouse_agresa,
      FAMILIA_KL=:pfamilia_kl,
      NAME_KL=:pname_kl,
      OTCHESTVO_KL=:potchestvo_kl
  WHERE ID_NUMBER_SKLADA=:pid_number_sklada;

  SELECT count(*) FROM SKLAD
  where INDEKS_ADRESA=:pindeks_adresa AND GOROD_ADRESA=:pgorod_adresa AND ULITSA_ADRESA=:pulitsa_adresa AND HOUSE_AGRESA=:phouse_agresa AND FAMILIA_KL=:pfamilia_kl AND NAME_KL=:pname_kl AND OTCHESTVO_KL=:potchestvo_kl
  into :K;
  if (:K=2) then
  exception EX_SKLAD_EXISTS;
  suspend;
end^


ALTER PROCEDURE UPD_TOVAR (
    PID_NUMBER_TOVARA INTEGER,
    PNAME_TOVARA VARCHAR(30),
    PEDINITSA_IZMERENIYA_TOVARA VARCHAR(5),
    PKOLICHESTVO INTEGER,
    PTSENA INTEGER)
AS
declare variable k integer;
begin
  UPDATE TOVAR
  SET NAME_TOVARA=:pname_tovara,
      EDINITSA_IZMERENIYA_TOVARA=:pedinitsa_izmereniya_tovara,
      KOLICHESTVO=:pkolichestvo,
      TSENA=:ptsena
  WHERE ID_NUMBER_TOVARA=:pid_number_tovara;

  SELECT count(*) FROM TOVAR
  where NAME_TOVARA=:pname_tovara AND EDINITSA_IZMERENIYA_TOVARA=:pedinitsa_izmereniya_tovara AND KOLICHESTVO=:pkolichestvo AND TSENA=:ptsena
  into :K;
  if (:K=2) then
  exception EX_TOVAR_EXISTS;
  suspend;
end^


ALTER PROCEDURE UPD_TT (
    PNAME_TT VARCHAR(30),
    PINDEKS_TT INTEGER,
    PGOROD_TT VARCHAR(30),
    PULITSA_TT VARCHAR(30),
    PHOUSE_TT INTEGER)
AS
declare variable k integer;
begin
  UPDATE TORGOVAYA_TOCHKA
  SET INDEKS_TT=:pindeks_tt,
    GOROD_TT=:pgorod_tt,
    ULITSA_TT=:pulitsa_tt,
    HOUSE_TT=:phouse_tt
  WHERE NAME_TT=:pname_tt;

  SELECT count(*) FROM TORGOVAYA_TOCHKA
  where INDEKS_TT=:pindeks_tt AND GOROD_TT=:pgorod_tt AND ULITSA_TT=:pulitsa_tt AND HOUSE_TT=:phouse_tt
  into :K;
  if (:K=2) then
  exception EX_TT_EXISTS;
  suspend;
end^



SET TERM ; ^

